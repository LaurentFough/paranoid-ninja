#!/usr/bin/env bash

set -ue

title() {
  if ! $QUIET ; then
    printf "${cyan}%s${red}%s${cyan}%s${endc}\n" "---" " $1 " "---"
  fi
}

log() { 
  if ! $QUIET ; then
    printf "${green}%s${white}%s${endc}\n" "[+]" " $1"
  fi 
}

die() {
  printf "${red}%s${white}%s${endc}\n" \
    "[-]" " $1"
  exit 1
}

checkRoot() {
  if [[ "$(id -u)" -ne 0 ]] ; then
    die "Please run this program as a root"
  fi
}

#######################################################
# Command option

loadEnv() {
  local env dir=$(pwd)
  if [ -f /etc/conf.d/paranoid-ninja ] ; then
    source /etc/conf.d/paranoid-ninja
  elif [ -f $dir/src/env ] ; then
    source $dir/src/env
  else 
    die "file env no found env=$dir/src/env"
  fi
}

checkConfigFile() {
  local relativ full
  relativ="$DIR/$1"
  full="${1-:/etc/paranoid/paranoid.conf}"
  if [ -f "$relativ" ] ; then
    source "$relativ"
  elif [ -f "$full" ] ; then
    source "$full"
  else
    die "No config file found"
  fi
}

checkBins() {
  for i in $@ ; do
    if ! hash $i &>/dev/null ; then
      die "$i no found"
    fi
  done
}

#######################################################
# Backup

backupFiles() {
  local b backup_list
  backup_list="$1"
  if [ $BACKUP_DIR ] ; then
    [[ ! -d $BACKUP_DIR ]] && mkdir -p $BACKUP_DIR
    # $f can be a directory or a file
    for b in $backup_list ; do
      if [[ -f "$BACKUP_DIR/${b##*/}" ]] ; then
        echo -n
      elif [[ -d "$BACKUP_DIR/${b##*/}" ]] ; then
        echo -n
      else
        echo "[*] backup $b to $BACKUP_DIR ..."
        cp -a "$b" "$BACKUP_DIR/"
      fi
    done
  else
    echo "[*] backup_dir is unset from config file, skip"
  fi
}

cpy() {
  local src dest
  src="$1"
  dest="$2"
  if [[ -f $src ]] || [[ -d $src ]] ; then
    echo "[+] cp -a $src $dest"
    cp -a $src $dest
  fi
}

restoreFiles() {
  local dir f
  dir=$BACKUP_DIR
  [[ -z $dir ]] && die "$dir no found"
  cpy $dir/hostname /etc/default/hostname
  cpy $dir/hosts /etc/hosts
  cpy $dir/resolv.conf /etc/resolv.conf
  cpy $dir/sysctl.conf /etc/sysctl.conf
  cpy $dir/torrc /etc/tor/torrc
  cpy $dir/.ssh $ssh_dir
  for f in $other_host_files ; do
    cpy $dir/${f##*/} $f
  done
}

#######################################################
# Firewall

nftReload() {
  local files f
  files="/var/lib/nftables/rules-save /etc/nftables.conf"
  for f in $files ; do
    if [ -f $f ] ; then
      $NFT flush ruleset
      $NFT -f $f
    fi
  done
}

iptReload() {
  local files f
  files="/var/lib/iptables/rules-save /etc/iptables/iptables.rules"
  for f in $files ; do
    if [ -f $f ] ; then
      $IPT_RES $f
    fi
  done
}

searchTorUid() {
  local tor_uid
  if tor_uid=$(id -u debian-tor 2>&1 | grep "^[0-9]") ||
    tor_uid=$(id -u tor 2>&1 | grep "^[0-9]") ; then
      echo $tor_uid
  else
    die "$0: tor_uid no found"
  fi
}

clearIptables() {
  local ipt=$(which iptables)
  $ipt -F
  $ipt -F -t nat
  $ipt -X
  $ipt -P INPUT DROP
  $ipt -P OUTPUT DROP
  $ipt -P FORWARD DROP
}

#######################################################
# Hostname

# arg 1:file , 2:oldvalue , 3:newvalue
applySed() { 
  if [ -f "$1" ] ; then
    sed -i "s:$2:$3:g" $1
  else
    die "Fail to apply sed rule s:$2:$3:g to $1"
  fi
}

#######################################################
# Check network

testPing() {
  if ping -q -c 1 gentoo.org > /dev/null ; then
    :
  else
    return 1
  fi
}

checkIp() {
  local ext_ip
  printf "%s %s\\n" \
    "==>" "Checking your public IP, please wait..."
  if ext_ip="$(curl -s -m 10 https://ipinfo.io)" ; then
    printf "%s\\n" "$ext_ip" | tr -d '"{}' | sed 's/ //g'
  elif ext_ip="$(curl -s -m 10 https://ip-api.com)" ; then
    printf "%s\\n" "$ext_ip" | tr -d '"{}' | sed 's/ //g'
  else
    printf "%s\\n" "[ failed ] curl: HTTP request error"
    exit 1
  fi
}

testTor() {
  local url
  url="https://check.torproject.org/"
  curl -s -m 10 -L "$url" | cat | tac | grep -q 'Congratulations'
  if [ $? -eq 0 ] ; then
    echo "[+] Tor is working properly"
    checkIp
  else
    echo "[-] Unfortunately, Tor is no working"
  fi
  exit 0
}

isValidAddress() {
  if ipcalc $1 | grep -i invalid ; then
    die "target $1 is not a valid address"
  else
    return 0
  fi
}

ctrl_net_device() {
  if ! ip a | awk '{print $2}' | grep -qi $net_device:$ ; then
    die "net_device $net_device no found"
  fi
}

killDhcp() {
  if old=$(pgrep -x dhcpcd) ; then
    pkill dhcpcd > /dev/null
    log "Kill a PID $old dhcpcd"
  fi
  old=
}

#######################################################
# MAC functions

ctrl_static_mac() {
  if [ $static_mac == 'random' ] ; then
    :
  elif echo $static_mac | grep -q "[0-9]*:[0-9]*:[0-9]*:[0-9]*:[0-9]*:[0-9]*" ; then
    :
  else
    die "Value of static_mac $static_mac is incorrect"
  fi
}

#######################################################
# Other Daemon

launchService() {
  local if_here
  echo "check service $1"
  if if_here=$(pgrep -x $1) ; then
    echo "[+] Restarting $1 ..."
    $SYSTEMCTL restart $1 &
    sleep 3
  fi
}

#  launchService ${sshuttle_service_name%.*}
restartDaemons() {
  #local daemon daemons="tor docker sshuttle"
  local daemon daemons="tor docker"
  for daemon in $daemons ; do
    launchService $daemon
  done
}
