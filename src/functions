#!/bin/sh

die() {
  printf "${red}%s${white}%s${endc}\n" \
    "[ Failed ]" " $1"
  exit 1
}

checkRoot() {
  if [[ "$(id -u)" -ne 0 ]] ; then
    printf "\\n${red}%s${endc}\\n" \
      "[ failed ] Please run this program as a root!" 2>&1
    exit 1
  fi
}

#######################################################
# Command option

checkConfigFile() {
  local relativ full
  relativ="$DIR/$1"
  full="${1-:/etc/paranoid/paranoid.conf}"
  if [ -f "$relativ" ] ; then
    source "$relativ"
  elif [ -f "$full" ] ; then
    source "$full"
  else
    die "No config file found"
  fi
}

checkArgConfig() {
  [[ "$#" -eq 0 ]] && die "call $0 with -c paranoid.conf"
  while [ "$#" -gt 0 ] ; do
    case "$1" in 
      -c | --config)
        checkConfigFile $2
        shift
        ;;
      -- | -* | *)
        die "call $0 with -c paranoid.conf"
        ;;
    esac
    shift
  done
}

#######################################################
# Backup

backupFiles() {
  local b backup_list
  backup_list="$1"
  if [ $backup_dir ] ; then
    [[ ! -d $backup_dir ]] && mkdir -p $backup_dir
    # $f can be a directory or a file
    for b in $backup_list ; do
      if [[ -f "$backup_dir/${b##*/}" ]] ; then
        echo -n
      elif [[ -d "$backup_dir/${b##*/}" ]] ; then
        echo -n
      else
        echo "[*] backup $b to $backup_dir ..."
        cp -a "$b" "$backup_dir/"
      fi
    done
  else
    echo "[*] backup_dir is unset from config file, skip"
  fi
}

cpy() {
  local file dir
  file="$1"
  dir="$2"
  if [[ -f $file ]] || [[ -d $file ]] ; then
    echo "[+] cp -a $file $dir"
  fi
}

restoreFiles() {
  local dir f
  dir=$backup_dir
  [[ -z $dir ]] && die "$dir no found"
  cpy $dir/hostname /etc/default/hostname
  cpy $dir/hosts /etc/hosts
  cpy $dir/resolv.conf /etc/resolv.conf
  cpy $dir/rules-save /var/lib/nftables/rules-save
  cpy $dir/sysctl.conf /etc/sysctl.conf
  cpy $dir/torrc /etc/tor/torrc
  cpy $dir/.ssh $ssh_dir
  for f in $other_host_files ; do
    cpy $dir/${f##*/} $f
  done
}

#######################################################
# Firewall

nftReload() {
  local files f
  files="/var/lib/nftables/rules-save /etc/nftables.conf"
  for f in $files ; do
    if [ -f $f ] ; then
      $NFT flush ruleset
      $NFT -f $f
    fi
  done
}

iptReload() {
  local files f
  files="/var/lib/iptables/rules-save /etc/iptables/iptables.rules"
  for f in $files ; do
    if [ -f $f ] ; then
      $IPT_RES $f
    fi
  done
}

searchTorUid() {
  local tor_uid
  id -u debian-tor > /dev/null 2>&1
  [[ $? -eq 0 ]] && tor_uid=$(id -u debian-tor)

  id -u tor > /dev/null 2>&1
  [[ $? -eq 0 ]] && tor_uid=$(id -u tor)

  [[ -z $tor_uid ]] && die "tor_uid no found"
  echo $tor_uid
}

#######################################################
# Hostname

# Write the new hostname in file from $other_host_files
otherHostFiles() {
  local f rule
  rule="$1"
  if [ $other_host_files ] ; then
    for f in $other_host_files ; do
      [[ -f $f ]] &&
        sed -i "$rule" $f
    done
  fi
}

# forXorg, avoid error like display no found
# http://ubuntuhandbook.org/index.php/2016/06/change-hostname-ubuntu-16-04-without-restart/
forXorg() {
  local xorg_new xorg_old old_host rule x y z com user
  old_host=$1
  rule=$2
  [[ -z $XAUTH ]] && die "xauth is no found, plz install"
  if [[ $xauthority_file ]] && [[ -f $xauthority_file ]] ; then
    com="$XAUTH -f $xauthority_file"
    xorg_new="$($com list | grep $old_host | sed "$rule")"
    [[ -z $xorg_new ]] && die "problem to found $old_host at $xauthority_file"

    x=$(echo $xorg_new | awk '{print $1}')
    y=$(echo $xorg_new | awk '{print $2}')
    z=$(echo $xorg_new | awk '{print $3}')
    xorg_old="$($com list | grep $old_host | awk '{print $1}')"
    user=$(echo ${xauthority_file%/*} | sed s:/home/::g)
    echo "[*] changed hostname with xauth"

    # ex: xauth add "blackhole-opsbm4pvto/unix:0" MIT-MAGIC-COOKIE-1  240a406abe7fac0a35bbe1cb58e09c18
    $com add "$x" $y $z

    # ex: xauth remove "blackhole-opsbm4pvto/unix:0"
    $com remove "$xorg_old"

    # fix permission
    $CHOWN $user:$user $xauthority_file
  else
    echo "[*] $xauthority_file no found, skip"
  fi
}

# exec if ssh_dir is set from conf file.
forSSH() {
  local old_host file files rule
  old_host="$1"
  rule="$2"
  if [ $ssh_dir ] ; then
    files=$(find $ssh_dir -type f | xargs grep $old_host | awk '{print $1}')
    for file in ${files%:*} ; do
      sed -i "$rule" ${file%:*} || die "sed in ${file%:*}"
      echo "[*] change host in ${file%:*}"
    done
  fi
}

# Write new value of hostname in multiple files
writeHost() {
  local new old file files rule xorg
  # check if Xorg running
  xorg="$(pgrep -x Xorg)"
  # /etc/hostname
  new="$1"
  old="$(cat /etc/hostname | head -n 1)"
  files="/etc/hostname /etc/hosts"
  rule="s:$old:$new:g"
  for file in $files ; do
    sed -i "$rule" $file || die "sed 1"
  done
  forSSH "$old" "$rule"
  [[ ! -z $xorg ]] && forXorg "$old" "$rule"
  otherHostFiles "$rule"
  $HOSTNAME $new
}

#######################################################
# Check network

checkIp() {
  local external_ip ip_1 ip_2
  printf "%s %s\\n" \
    "==>" "Checking your public IP, please wait..."

  ip_1=$(curl -s -m 10 https://ipinfo.io)
  ip_2=$(curl -s -m 10 https://ip-api.com)
  if external_ip="$ip_1" || external_ip="$ip_2" ; then
    printf "%s\\n" "$external_ip" | tr -d '"{}' | sed 's/ //g'
  else
    printf "%s\\n" "[ failed ] curl: HTTP request error"
    exit 1
  fi
}

testTor() {
  local url
  url="https://check.torproject.org/"
  curl -s -m 10 -L "$url" | cat | tac | grep -q 'Congratulations'
  if [ $? -eq 0 ] ; then
    echo "[+] Tor is working properly"
    checkIp
  else
    echo "[-] Unfortunately, Tor is no working"
    exit 0
  fi
}

#######################################################
# Other Daemon

loadTor() {
  local if_tor
  if_tor=$(pgrep -x tor)
  if [[ -z $if_tor ]] ; then
    $SYSTEMCTL start tor &
    wait $!
  else
    echo "[+] Restarting tor ..."
    $SYSTEMCTL restart tor &
    wait $!
  fi
}
